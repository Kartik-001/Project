from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
from langchain.memory import CassandraChatMessageHistory, ConversationBufferMemory
from langchain.llms import OpenAI
from langchain import LLMChain, PromptTemplate
import json

# This secure connect bundle is autogenerated when you donwload your SCB, 
# if yours is different update the file name below
cloud_config= {
  'secure_connect_bundle': 'secure-connect-cyoa.zip'
}

# This token json file is autogenerated when you donwload your token, 
# if yours is different update the file name below
with open("cyoa-token.json") as f:
    secrets = json.load(f)

CLIENT_ID = secrets["clientId"]
CLIENT_SECRET = secrets["secret"]
ASTRA_DB_KEYSPACE = "cyoa"
OPENAI_API_KEY = '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'

auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
try:
    cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
    session = cluster.connect()
except Exception as e:
    print(f"Error connecting to Cassandra: {e}")

message_history = CassandraChatMessageHistory(
    session_id="anything",
    session=session,
    keyspace=ASTRA_DB_KEYSPACE,
    ttl_seconds=3600 # time to live seconds
    # which means we are going to store to all of this for 60 minutes 
)

message_history.clear()

cass_buff_memory = ConversationBufferMemory(
     memory_key='chat_history',
     chat_memory=message_history
)

template = """
You are now the guide of a mystical journey in the Whispering Woods.
A traveler named Elara seeks the lost Gem of Serenity.
You must navigate her through challenges, choices, and consequences,
dynamically adapting the tale based on the traveler's decisions.
Your goal is to create a branching narrative experience where each choice
leads to a new path, ultimately determining Elara's fate.

Here are some rules to follow:
1. Start by asking the player to choose some kind of weapons that will be used later in the game
2. Have a few paths that lead to success
3. Have some paths that lead to death. If the user dies generate a response that explains the death and ends in the text: 'The End.', I will search for this text to end the game

Here is the chat history, use this to understand what to say next: {chat_history}
Human: {human_input}
AI:
"""

# we are telling with natural language the AI model how you want it to generate a game for you,
# which is really going to be the future of programming
    
prompt = PromptTemplate(
    input_variables=['chat_history', 'human_input'],
    template=template
)

llm = OpenAI(openai_api_key=OPENAI_API_KEY)
llm_chain = LLMChain(
    LLm=llm,
    prompt=prompt,
    memory=cass_buff_memory
)

choice = 'start'

while True:
    response = llm_chain.predict(human_input=choice)
    print(response.strip())

    if 'The End.' in response:
        break 
     
    choice = input('Your reply: ').strip()